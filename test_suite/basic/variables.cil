// Test file for variable declarations, types, arrays, and pointers

// Basic variable declarations
int x = 5;
int y = -10;
byte b = 100;
bool flag = true;

// Array declarations
int numbers[5];
char message[20];
int global_array[10];
int* global_ptr;

// Constants
#define MAX_SIZE 100
#define PI 3.14159

// Global variables
int global_counter = 0;
int global_var = 42;

// Main function
void main() {
    // Local variables
    int local_var = 42;
    byte small_num = 255;
    
    // Initialize array
    int i;
    for (i = 0; i < 5; i++) {
        numbers[i] = i * 10;
    }
    
    // Print values
    printf("x = %d, y = %d\n", x, y);
    printf("local_var = %d\n", local_var);
    
    // Boolean operations
    if (flag) {
        printf("Flag is true\n");
    } else {
        printf("Flag is false\n");
    }
    
    // Use arrays
    printf("numbers[3] = %d\n", numbers[3]);
    
    // Modify global variable
    global_counter += 1;
    printf("global_counter = %d\n", global_counter);
}

void test_variables() {
    int local_var = 10;
    char c = 'A';
    float f = 3.14;
    
    // Basic operations
    local_var = local_var + 1;
    local_var *= 2;
    
    // Boolean operations
    flag = !flag;
    flag = local_var > 0;
    
    // Type conversions
    int i = (int)f;
    char upper = c + 32;
    
    // Array operations
    int local_array[5] = {1, 2, 3, 4, 5};
    int array_size = sizeof(local_array) / sizeof(int);
    
    for (int i = 0; i < array_size; i++) {
        local_array[i] *= 2;
    }
    
    // Pointer operations
    int value = 42;
    int* ptr = &value;
    *ptr = 100;
    
    // Dynamic memory
    int* dynamic_array = (int*)malloc(5 * sizeof(int));
    for (int i = 0; i < 5; i++) {
        dynamic_array[i] = i * i;
    }
    free(dynamic_array);
    
    // Pointer arithmetic
    int numbers[3] = {1, 2, 3};
    int* num_ptr = numbers;
    num_ptr++;  // Move to next element
    *num_ptr = 20;  // Modify second element
} 