// Dining Philosophers problem with deadlock detection
#define NUM_PHILOSOPHERS 5

typedef enum {
    THINKING,
    HUNGRY,
    EATING
} PhilosopherState;

typedef struct {
    pthread_mutex_t mutex;
    pthread_cond_t can_eat[NUM_PHILOSOPHERS];
    PhilosopherState state[NUM_PHILOSOPHERS];
} DiningTable;

DiningTable table;

// Verification properties
bool deadlock_detected = false;
bool starvation_detected = false;
int eat_count[NUM_PHILOSOPHERS] = {0};

void test_deadlock() {
    // Initialize all philosophers to thinking
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        table.state[i] = THINKING;
    }
}

void pickup_forks(int phil_id) {
    pthread_mutex_lock(&table.mutex);
    
    table.state[phil_id] = HUNGRY;
    
    // Try to eat if neighbors are not eating
    while (table.state[(phil_id + 1) % NUM_PHILOSOPHERS] == EATING ||
           table.state[(phil_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] == EATING) {
        pthread_cond_wait(&table.can_eat[phil_id], &table.mutex);
    }
    
    table.state[phil_id] = EATING;
    eat_count[phil_id]++;
    
    pthread_mutex_unlock(&table.mutex);
}

void putdown_forks(int phil_id) {
    pthread_mutex_lock(&table.mutex);
    
    table.state[phil_id] = THINKING;
    
    // Signal neighbors that they might be able to eat
    pthread_cond_signal(&table.can_eat[(phil_id + 1) % NUM_PHILOSOPHERS]);
    pthread_cond_signal(&table.can_eat[(phil_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS]);
    
    pthread_mutex_unlock(&table.mutex);
}

void* philosopher(void* arg) {
    int id = *(int*)arg;
    
    while (1) {
        // Think for a while
        sleep(1);
        
        // Get hungry and try to eat
        pickup_forks(id);
        
        // Eat for a while
        sleep(1);
        
        // Done eating, put down forks
        putdown_forks(id);
    }
    
    return NULL;
}

// LTL properties for verification
/*
ltl no_deadlock { [] (!deadlock_detected) }
ltl no_starvation { [] (eat_count[0] > 0 && eat_count[1] > 0 && eat_count[2] > 0 && eat_count[3] > 0 && eat_count[4] > 0) }
ltl mutual_exclusion { [] !(table.state[0] == EATING && table.state[1] == EATING) }
ltl liveness { [] (table.state[0] == HUNGRY -> <> table.state[0] == EATING) }
*/ 