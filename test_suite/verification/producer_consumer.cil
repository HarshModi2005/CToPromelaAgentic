// Producer-Consumer problem with verification properties
#define BUFFER_SIZE 5

typedef struct {
    int items[BUFFER_SIZE];
    int front;
    int rear;
    int count;
    pthread_mutex_t mutex;
    pthread_cond_t not_full;
    pthread_cond_t not_empty;
} Buffer;

Buffer buffer = {
    .front = 0,
    .rear = 0,
    .count = 0
};

// Verification properties
bool buffer_overflow = false;
bool buffer_underflow = false;
bool mutual_exclusion_violated = false;

void* producer(void* arg) {
    int item = 1;
    
    while (1) {
        pthread_mutex_lock(&buffer.mutex);
        
        // Wait if buffer is full
        while (buffer.count == BUFFER_SIZE) {
            pthread_cond_wait(&buffer.not_full, &buffer.mutex);
        }
        
        // Add item to buffer
        buffer.items[buffer.rear] = item++;
        buffer.rear = (buffer.rear + 1) % BUFFER_SIZE;
        buffer.count++;
        
        // Verify no overflow
        assert(buffer.count <= BUFFER_SIZE);
        if (buffer.count > BUFFER_SIZE) {
            buffer_overflow = true;
        }
        
        pthread_cond_signal(&buffer.not_empty);
        pthread_mutex_unlock(&buffer.mutex);
    }
    
    return NULL;
}

void* consumer(void* arg) {
    while (1) {
        pthread_mutex_lock(&buffer.mutex);
        
        // Wait if buffer is empty
        while (buffer.count == 0) {
            pthread_cond_wait(&buffer.not_empty, &buffer.mutex);
        }
        
        // Remove item from buffer
        int item = buffer.items[buffer.front];
        buffer.front = (buffer.front + 1) % BUFFER_SIZE;
        buffer.count--;
        
        // Verify no underflow
        assert(buffer.count >= 0);
        if (buffer.count < 0) {
            buffer_underflow = true;
        }
        
        pthread_cond_signal(&buffer.not_full);
        pthread_mutex_unlock(&buffer.mutex);
    }
    
    return NULL;
}

// LTL properties for verification
/*
ltl no_overflow { [] (!buffer_overflow) }
ltl no_underflow { [] (!buffer_underflow) }
ltl mutual_exclusion { [] (!mutual_exclusion_violated) }
ltl liveness { [] (buffer.count == BUFFER_SIZE -> <> buffer.count < BUFFER_SIZE) }
*/ 