// Concurrent programming
#include <pthread.h>

#define NUM_THREADS 3
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int shared_counter = 0;

void* thread_function(void* arg) {
    int thread_id = *(int*)arg;
    
    for (int i = 0; i < 5; i++) {
        // Critical section
        pthread_mutex_lock(&mutex);
        shared_counter++;
        printf("Thread %d: counter = %d\n", thread_id, shared_counter);
        pthread_mutex_unlock(&mutex);
        
        // Non-critical section
        usleep(1000);
    }
    
    return NULL;
}

void test_concurrency() {
    pthread_t threads[NUM_THREADS];
    int thread_ids[NUM_THREADS];
    
    // Create threads
    for (int i = 0; i < NUM_THREADS; i++) {
        thread_ids[i] = i;
        pthread_create(&threads[i], NULL, thread_function, &thread_ids[i]);
    }
    
    // Wait for threads to finish
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }
    
    // Cleanup
    pthread_mutex_destroy(&mutex);
} 